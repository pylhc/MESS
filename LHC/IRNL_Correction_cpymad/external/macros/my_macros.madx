! Tune matching
do_tune_matching(beam_no): macro = {
  if(beam_no == 4) {
    exec, do_tune_matching(2);
  } else {
    ! set, sequence=lhcbbeam_no;
    match,chrom;
      global, q1=qxinit, q2=qyinit;
      vary,   name=dQx.bbeam_no, step=1.0E-7 ;
      vary,   name=dQy.bbeam_no, step=1.0E-7 ;
      lmdif,  calls=100, tolerance=1.0E-21;
    endmatch;

    match,chrom;
      global, dq1=dqxinit, dq2=dqyinit;
      vary,   name=dQpx.bbeam_no, step=1.0E-7 ;
      vary,   name=dQpy.bbeam_no, step=1.0E-7 ;
      lmdif,  calls=100, tolerance=1.0E-21;
    endmatch;
    
    match,chrom;
      global, q1=qxinit, q2=qyinit;
      global, dq1=dqxinit, dq2=dqyinit;
      vary,   name=dQx.bbeam_no, step=1.0E-7 ;
      vary,   name=dQy.bbeam_no, step=1.0E-7 ;
      vary,   name=dQpx.bbeam_no, step=1.0E-7 ;
      vary,   name=dQpy.bbeam_no, step=1.0E-7 ;
      lmdif,  calls=100, tolerance=1.0E-21;
    endmatch;
  };
};

! HLLHC V1.3 uses different variables
do_hllhc_tune_matching(beam_no): macro = {
 if(beam_no == 4) {
    exec, do_hllhc_tune_matching(2);
  } else {
    ! set, sequence=lhcbbeam_no;    
    match,chrom;
      global, q1=qxinit, q2=qyinit;
      vary,   name=kqtf.bbeam_no, step=1.0E-7 ;
      vary,   name=kqtd.bbeam_no, step=1.0E-7 ;
      lmdif,  calls=100, tolerance=1.0E-21;
    endmatch;

    match,chrom;
      global, dq1=dqinit, dq2=dqinit;
      vary,   name=ksf.bbeam_no, step=1.0E-7 ;
      vary,   name=ksd.bbeam_no, step=1.0E-7 ;
      lmdif,  calls=100, tolerance=1.0E-21;
    endmatch;

    match,chrom;
      global, q1=qxinit, q2=qyinit;
      global, dq1=dqinit, dq2=dqinit;
      vary,   name=ksf.bbeam_no, step=1.0E-7 ;
      vary,   name=ksd.bbeam_no, step=1.0E-7 ;
      vary,   name=kqtf.bbeam_no, step=1.0E-7 ;
      vary,   name=kqtd.bbeam_no, step=1.0E-7 ;
      lmdif,  calls=100, tolerance=1.0E-21;
    endmatch;
  };
};


! Amplitude detuning via ptc
get_ampdet(file_name, beam_no): macro = {
  if(beam_no == 4) {
    exec, get_ampdet(file_name, 2);
  } else {
    ptc_create_universe;
  !    ptc_create_layout,model=3,method=6,nst=3,resplit,thin=0.0005,xbend=0.0005;
      ptc_create_layout,model=3,method=4,nst=3,exact;    ptc_align;
  !    ptc_setswitch, fringe=True;
      select_ptc_normal,  q1=0, q2=0;
      select_ptc_normal, dq1=1,dq2=1;
      select_ptc_normal, dq1=2,dq2=2;
      select_ptc_normal, dq1=3,dq2=3;
      select_ptc_normal, anhx=1,0,0; ! dQx/dex
      select_ptc_normal, anhy=0,1,0; ! dQy/dey
      select_ptc_normal, anhx=0,1,0;
      select_ptc_normal, anhy=1,0,0;
      select_ptc_normal, anhx=2,0,0; ! d2Qx/dex^2
      select_ptc_normal, anhx=1,1,0;
      select_ptc_normal, anhx=0,2,0;
      select_ptc_normal, anhy=0,2,0; ! d2Qy/dey^2
      select_ptc_normal, anhy=1,1,0; ! d2Qy/deydex
      select_ptc_normal, anhy=2,0,0;
      ptc_normal,closed_orbit,normal,icase=5,no=5;
      write, table=normal_results,file='Outputdata/bbeam_no.file_name.ptc_ampdet.tfs';
    ptc_end;
  };
};


! Get RDTs via ptc
get_rdt(file_name, beam_no): macro = {
  if(beam_no == 4) {
    exec, get_ampdet(file_name, 2);
  } else {
    ptc_create_universe;
        ptc_create_layout, model=1, method=6, nst=5, exact=true, closed_layout=true;
        ptc_setswitch, debuglevel=1, exact_mis=true, time=true, totalpath=false;
        ptc_twiss, table=twiss, icase=5, no=4, closed_orbit=false, rmatrix, normal, writetmap, trackrdts;
        write, table=twissrdt, file='bbeam_no.file_name.ptc_twiss.twissrdt.tfs';
        write, table=twiss, file='bbeam_no.file_name.ptc_twiss.twiss.tfs';
        write, table=ptc_twiss_summary, file='bbeam_no.file_name.ptc_twiss.summary.tfs';
        write, table=nonlin, file='bbeam_no.file_name.ptc_twiss.nonlin.tfs';
    ptc_end;
  };
};


! Twiss values at the IPs
get_ips(file_name, beam_no): macro = {
  if(beam_no == 4) {
    exec, get_ips(file_name, 2);
  } else {
    ! set, sequence=lhcbbeam_no;
    select, flag=twiss,clear;
    select, flag=twiss, pattern=IP[1258]$, column=name,s,x,y,px,py,betx,bety,alfx,alfy,dx,dpx,mux,muy;
    twiss,chrom,sequence=lhcbbeam_no,file='Outputdata/bbeam_no.file_name.twiss_ip.tfs';
  };
};


! Twiss values everywhere
get_full_twiss(file_name, beam_no): macro = {
  if(beam_no == 4) {
    exec, get_full_twiss(file_name, 2);
  } else {
    ! set, sequence=lhcbbeam_no;
    select,flag=twiss,clear;
    select, flag=twiss, pattern="BPM", column=name,s,x,y,betx,bety,alfx,alfy,dx,dpx,mux,muy;
    select, flag=twiss, pattern="M",   column=name,s,x,y,betx,bety,alfx,alfy,dx,dpx,mux,muy;
    select, flag=twiss, pattern="IP",  column=name,s,x,y,betx,bety,alfx,alfy,dx,dpx,mux,muy;
    twiss,chrom,sequence=lhcbbeam_no,file='Outputdata/bbeam_no.file_name.twiss.tfs';
  };
};


! closest tune approach
do_cta(beam_no): macro = {
  if(beam_no == 4) {
    exec, do_cta(file_name, 2);
  } else {
    ! set, sequence=lhcbbeam_no;
    ptcqmid = (ptcqyinit + ptcqxinit) * 0.5;
    qxmid = floor(qxinit) + ptcqmid;
    qymid = floor(qyinit) + ptcqmid;
    match, chrom;
      global, q1=qxmid, q2=qymid;
      global, dq1=dqxinit, dq2=dqyinit;
      vary,   name=dQx.bbeam_no, step=1.0E-7 ;
      vary,   name=dQy.bbeam_no, step=1.0E-7 ;
      vary,   name=dQpx.bbeam_no, step=1.0E-7 ;
      vary,   name=dQpy.bbeam_no, step=1.0E-7 ;
      lmdif,  calls=100, tolerance=1.0E-21;
    endmatch;
  };
};


! closest tune approach (HLLHC)
do_hllhc_cta(beam_no): macro = {
  if(beam_no == 4) {
    exec, do_cta(file_name, 2);
  } else {
    ! set, sequence=lhcbbeam_no;
    ptcqmid = (ptcqyinit + ptcqxinit) * 0.5;
    qxmid = floor(qxinit) + ptcqmid;
    qymid = floor(qyinit) + ptcqmid;
    match, chrom;
      global, q1=qxmid, q2=qymid;
      global, dq1=dqinit, dq2=dqinit;
      vary,   name=kqtf.bbeam_no, step=1.0E-7 ;
      vary,   name=kqtd.bbeam_no, step=1.0E-7 ;
      vary,   name=ksf.bbeam_no, step=1.0E-7 ;
      vary,   name=ksd.bbeam_no, step=1.0E-7 ;
      lmdif,  calls=100, tolerance=1.0E-21;
    endmatch;
  };
};


! call macro with numbered names
get_macro_num(macro_name, file_name, number, beam_no): macro = {
  exec, macro_name(file_name.number, beam_no);
};


! Orbit Correction
correct_orbit(my_mode): macro = {
  print, text="Enter Orbit Correction Macro";
  orbittol = 1e-14;

  ! Disable default correctors first
  usekick, status=off, class=kicker;
  usekick, status=off, class=hkicker;
  usekick, status=off, class=vkicker;
  usekick, status=off, class=virtualcorrector;

  ! Enable corrector and monitors to use
  usekick, status=on, pattern="^MCB";
  usemonitor, status=on, class=monitor;

  ! Correct to target
  print, text="Correcting to target";
  twiss,chrom,table;
  correct, flag=ring, mode=my_mode, plane=y, error=orbittol, corzero=0, cond=0, resout=0;  !, target=my_orbit_target;
  correct, flag=ring, mode=my_mode, plane=x, error=orbittol, corzero=0, cond=0, resout=0;  !, target=my_orbit_target;
  twiss,chrom,table;
  correct, flag=ring, mode=my_mode, plane=y, error=orbittol, corzero=0, cond=0, resout=0;  !, target=my_orbit_target;
  correct, flag=ring, mode=my_mode, plane=x, error=orbittol, corzero=0, cond=0, resout=0;  !, target=my_orbit_target;
  twiss,chrom,table;
  correct, flag=ring, mode=my_mode, plane=y, error=orbittol, corzero=0, cond=0, resout=0;  !, target=my_orbit_target;
  correct, flag=ring, mode=my_mode, plane=x, error=orbittol, corzero=0, cond=0, resout=0;  !, target=my_orbit_target;
  twiss,chrom,table;
  correct, flag=ring, mode=my_mode, plane=y, error=orbittol, corzero=0, cond=0, resout=0;  !, target=my_orbit_target;
  correct, flag=ring, mode=my_mode, plane=x, error=orbittol, corzero=0, cond=0, resout=0;  !, target=my_orbit_target;
};


! Triplet Misalignments

misalign_all_triplets(ip_numbers, misalign_sigmaq12, misalign_sigmaq3): macro = {
  ! ip_numbers need to be sorted 1,2,5,8,12,15,18,25,28,58,258,158,128,125,1258!
  ! misalign maxabs = maximum absolute misalignment (will be uniformly distributed between [-maxabs, +maxabs])
  !print, text="debugtext ips ip_numbers,  abs misalign_sigmaq12, misalign_sigmaq3";
  if (ip_numbers == 1){
    exec, misalign_triplet(L, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 1, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 2){
    exec, misalign_triplet(L, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 2, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 5){
    exec, misalign_triplet(L, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 5, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 8){
    exec, misalign_triplet(L, 8, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 8, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 12){
    exec, misalign_triplet(L, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 2, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 15){
    exec, misalign_triplet(L, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 5, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 18){
    exec, misalign_triplet(L, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 8, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 8, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 25){
    exec, misalign_triplet(L, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 5, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 28){
    exec, misalign_triplet(L, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 8, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 8, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 58){
    exec, misalign_triplet(L, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 8, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 8, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 258){
    exec, misalign_triplet(L, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 8, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 8, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 158){
    exec, misalign_triplet(L, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 8, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 8, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 128){
    exec, misalign_triplet(L, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 8, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 8, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 125){
    exec, misalign_triplet(L, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 5, misalign_sigmaq12, misalign_sigmaq3);
  };
  if (ip_numbers == 1258){
    exec, misalign_triplet(L, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 1, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 2, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 5, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(L, 8, misalign_sigmaq12, misalign_sigmaq3);
    exec, misalign_triplet(R, 8, misalign_sigmaq12, misalign_sigmaq3);
  };
};


misalign_triplet(ip_side, ip_value, misalign_q12, misalign_q3): macro = {
  ! Misalignes all slices of one Magnet together, but each magnet in the triplet independently
  ! side = L or R
  ! value = 1, 2, 5 or 8
  ! misalign_q12 = misalignment for q1 and q2 (one sigma)
  ! misalign_q12 = misalignment for q3 (one sigma)
  !print, text="debugtext side ip_side, value ip_value, abs misalign_q12";

  select, flag = error, clear;
  select, flag = error, pattern = "MQXA\.1ip_sideip_value.*";
  select, flag = error, pattern = "MQXFA\.A1ip_sideip_value.*";
  ealign, dx = misalign_q12*TGAUSS(2.5), dy = misalign_q12*TGAUSS(2.5); 
  
  ! Only HL-LHC
  select, flag = error, clear;
  select, flag = error, pattern = "MQXFA\.B1ip_sideip_value.*";
  ealign, dx = misalign_q12*TGAUSS(2.5), dy = misalign_q12*TGAUSS(2.5); 
  
  select, flag = error, clear;
  select, flag = error, pattern = "MQXB\.A2ip_sideip_value.*";
  select, flag = error, pattern = "MQXFB\.A2ip_sideip_value.*";
  ealign, dx = misalign_q12*TGAUSS(2.5), dy = misalign_q12*TGAUSS(2.5); 
  
  select, flag = error, clear;
  select, flag = error, pattern = "MQXB\.B2ip_sideip_value.*";
  select, flag = error, pattern = "MQXFB\.B2ip_sideip_value.*";
  ealign, dx = misalign_q12*TGAUSS(2.5), dy = misalign_q12*TGAUSS(2.5); 
  
  select, flag = error, clear;
  select, flag = error, pattern = "MQXA\.3ip_sideip_value.*";
  select, flag = error, pattern = "MQXFA\.A3ip_sideip_value.*";
  ealign, dx = misalign_q3*TGAUSS(2.5), dy = misalign_q3*TGAUSS(2.5); 
  
  ! Only HL-LHC
  select, flag = error, clear;
  select, flag = error, pattern = "MQXFA\.B3ip_sideip_value.*";
  ealign, dx = misalign_q3*TGAUSS(2.5), dy = misalign_q3*TGAUSS(2.5); 
};


select_triplets(myflag_name, ip_numbers): macro = {
  select, flag = myflag_name, pattern = "MQX[AB]\..*[ip_numbers]";
  select, flag = myflag_name, pattern = "MQXF[AB]\..*[ip_numbers]";
};

deactivate_arc_sextupoles(beam_no): macro = {
  !Strong sextupoles of sectors 81/12/45/56
  KSF1.A81Bbeam_no  :=0.0;
  KSF1.A12Bbeam_no  :=0.0;
  KSF1.A45Bbeam_no  :=0.0;
  KSF1.A56Bbeam_no  :=0.0;
  KSD2.A81Bbeam_no  :=0.0;
  KSD2.A12Bbeam_no  :=0.0;
  KSD2.A45Bbeam_no  :=0.0;
  KSD2.A56Bbeam_no  :=0.0;
  !Weak sextupoles of sectors 81/12/45/56
  KSF2.A81Bbeam_no  :=0.0;
  KSF2.A12Bbeam_no  :=0.0;
  KSF2.A45Bbeam_no  :=0.0;
  KSF2.A56Bbeam_no  :=0.0;
  KSD1.A81Bbeam_no  :=0.0;
  KSD1.A12Bbeam_no  :=0.0;
  KSD1.A45Bbeam_no  :=0.0;
  KSD1.A56Bbeam_no  :=0.0;
  !Weak sextupoles of sectors 78/23/34/67
  KSF1.A78Bbeam_no  :=0.0;
  KSF2.A78Bbeam_no  :=0.0;
  KSF1.A23Bbeam_no  :=0.0;
  KSF2.A23Bbeam_no  :=0.0;
  KSF1.A34Bbeam_no  :=0.0;
  KSF2.A34Bbeam_no  :=0.0;
  KSF1.A67Bbeam_no  :=0.0;
  KSF2.A67Bbeam_no  :=0.0;
  KSD1.A78Bbeam_no  :=0.0;
  KSD2.A78Bbeam_no  :=0.0;
  KSD1.A23Bbeam_no  :=0.0;
  KSD2.A23Bbeam_no  :=0.0;
  KSD1.A34Bbeam_no  :=0.0;
  KSD2.A34Bbeam_no  :=0.0;
  KSD1.A67Bbeam_no  :=0.0;
  KSD2.A67Bbeam_no  :=0.0;
};
